---

 - name: ELB | Create ELB Security Group
   local_action:
     module: ec2_group
     name: "{{ item.sg_name }}"
     description: "{{ item.sg_description }}"
     region: "{{ vpc_region }}" # Change the AWS region here
     vpc_id: "{{ vpc.vpc_id }}" # vpc is the resgister name, you can also set it manually
     state: present
     rules: "{{ item.sg_rules }}"
   with_items: elb_security_groups
   register: elb_sg

 - name: ELB | Tag the ELB Security Group with a name
   local_action:
     module: ec2_tag
     resource: "{{ item.group_id}}"
     region: "{{ vpc_region }}"
     state: present
     tags:
       Name: "{{ vpc_name }}-{{ item.item.sg_name }}"
   with_items: elb_sg.results

 - name: ELB | Set the ELB Security Group id as facts
   set_fact:
     elb_security_group: "{{ item.group_id}}"
   with_items: elb_sg.results

 - name: ELB | Ensure load balancer exists
   local_action:
     module: ec2_elb_lb
     name: "{{ load_balancer_name }}"
     security_group_ids: "{{ elb_security_group }}"
     state: present
     region: "{{ vpc_region }}"
     subnets: 
       - "{{ public_subnet_1 }}"
       - "{{ public_subnet_2 }}"
     purge_subnets: "{{ elb_purge_subnets }}"
     cross_az_load_balancing: "{{ elb_cross_az_load_balancing }}"
     connection_draining_timeout: "{{ elb_connection_draining_timeout }}"
     listeners:
       - protocol: http
         load_balancer_port: 80
         instance_protocol: http
         instance_port: 80
   register: web_elb

 - debug: var=hostvars[item]['instance_id'] verbosity=2
   with_items: groups['webserver']
   
 - name: WebServer | Set the Instances facts
   set_fact:
     
 - name: ELB | Adding EC2 instance to the ELB
   local_action:
      module: ec2_elb
      region: "{{ vpc_region }}"
      ec2_elbs: "{{ load_balancer_name }}"
      instance_id: "{{ hostvars[item]['instance_id'] }}"
      state: present
   with_items: groups['webserver']
